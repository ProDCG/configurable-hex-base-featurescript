FeatureScript 2411;
import(path : "onshape/std/geometry.fs", version : "2411.0");
import(path : "onshape/std/common.fs", version : "2411.0");

const MY_SIZE_BOUNDS = { (inch) : [0.1, 10, 1000] } as LengthBoundSpec;
const MY_OCTAGON_BOUNDS = { (inch) : [0.1, 3 / 8, 10] } as LengthBoundSpec;
const MY_STRUT_BOUNDS = { (inch) : [0.1, 0.125, 0.5] } as LengthBoundSpec;

export enum Excess {
    annotation { "Name" : "Left and Back" }
    LEFT_AND_BACK,
    annotation { "Name" : "Right and Back" }
    RIGHT_AND_BACK,
    annotation { "Name" : "Left and Front" }
    LEFT_AND_FRONT,
    annotation { "Name" : "Right and Back" }
    RIGHT_AND_FRONT
}

annotation { "Feature Type Name" : "Configurable Hex Base" }

export const hexBase = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "Base Length:" }
        isLength(definition.length, MY_SIZE_BOUNDS);
        
        annotation { "Name" : "Base Width:" }
        isLength(definition.width, MY_SIZE_BOUNDS);
        
        annotation { "Name" : "Base Height:" }
        isLength(definition.height, MY_SIZE_BOUNDS);
        
        annotation { "Name" : "Octagon Side Length:" }
        isLength(definition.sideLength, MY_OCTAGON_BOUNDS);
        
        annotation { "Name" : "Strut Width:" }
        isLength(definition.strutWidth, MY_STRUT_BOUNDS);
        
        annotation { "Name" : "Excess Material" }
        definition.excess is Excess;
    }
    {
        var baseLength = definition.length;
        var baseWidth = definition.width;
        var baseHeight = definition.height;
        var octagonLength = definition.sideLength;
        
        // creates sample patch sketch, finished
        var sampleSketch = newSketchOnPlane(context, id + "sampleSketch", {
                "sketchPlane" : XY_PLANE
            });
            
            skLineSegment(sampleSketch, "line1", {
                        "start" : vector(octagonLength / 2, 0 * octagonLength),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketch, "line2", {
                        "start" : vector(0 * octagonLength, octagonLength / 2),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketch, "line3", {
                        "start" : vector(octagonLength / 2, octagonLength / 2),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketch, "line4", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketch, "line5", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketch, "line6", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketch, "line7", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketch, "line8", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketch, "line9", {
                        "start" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketch, "line10", {
                        "start" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketch, "line11", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketch, "line12", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketch, "line13", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketch, "line14", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketch, "line15", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketch, "line16", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
                    });
            
            // skConstraint(sampleSketch, "constraint1", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line1.end", "localSecond" : "line2.end", "localThird" : "line3.start"
            //         });
            // skConstraint(sampleSketch, "constraint2", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line3.end", "localSecond" : "line4.start", "localThird" : "line5.start"
            //         });
            // skConstraint(sampleSketch, "constraint3", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line4.end", "localSecond" : "line7.start", "localThird" : "line14.start"
            //         });
            // skConstraint(sampleSketch, "constraint4", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line5.end", "localSecond" : "line6.start", "localThird" : "line8.start"
            //         });
            // skConstraint(sampleSketch, "constraint5", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line6.end", "localSecond" : "line7.end", "localThird" : "line11.start"
            //         });
            // skConstraint(sampleSketch, "constraint6", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line8.end", "localSecond" : "line9.start", " localThird" : "line10.start"
            //         });
            // skConstraint(sampleSketch, "constraint7", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line11.end", "localSecond" : "line12.start", "localThird" : "line13.start"
            //         });
            // skConstraint(sampleSketch, "constraint8", {
            //             "constraintType" : ConstraintType.COINCIDENT, "localFirst" : "line14.end", "localSecond" : "line15.start", "localThird" : "line16.start"
            //         });
            
            skSolve(sampleSketch);
        
        var sample = (octagonLength * 2 + octagonLength / sqrt(2) * 2);
        var repeatLength = baseLength / sample;
        var repeatWidth = baseWidth / sample;
        
        var roundedRepeatLength = floor(repeatLength);
        var roundedRepeatWidth = floor(repeatWidth);
        
        var strut = definition.strutWidth;
        
        // creates the full base sketch, finished
        var baseSketch = newSketchOnPlane(context, id + "baseSketch", {
                "sketchPlane" : XY_PLANE
            });
            
            linearPattern(context, id + "linearPattern1", {
                        "patternType" : PatternType.FACE,
                        "entities" : qSketchRegion(id + "sampleSketch"),
                        "faces" : qCreatedBy(id + "sampleSketch", EntityType.BODY),
                        "directionOne" : qCreatedBy(newId() + "Right", EntityType.FACE),
                        "distance" : sample,
                        "instanceCount" : roundedRepeatWidth,
                        "hasSecondDir" : true,
                        "directionTwo" : qCreatedBy(newId() + "Front", EntityType.FACE),
                        "distanceTwo" : sample,
                        "instanceCountTwo" : roundedRepeatLength,
                        "oppositeDirectionTwo" : true
                    });
            
            skSolve(baseSketch);
        
        // not working
        // extrude(context, id + "extrude1", {
        //         "bodyType" : ExtendedToolBodyType.THIN,
        //         // "oppositeDirection" : true,
        //         "depth" : baseHeight,
        //         // "wallShape" : qCreatedBy(id + "baseSketch", EntityType.BODY),
        //         "wallShape" : qSketchRegion(id + "baseSketch"),
        //         "thickness1" : strut,
        //         "thickness2" : strut
        // });
        
        // creates the excess part sketch, finished
        var excessSketch = newSketchOnPlane(context, id + "excessSketch", {
                "sketchPlane" : XY_PLANE
            });
            
            // redundant
            // skRectangle(excessSketch, "baserectangle", {
            //         "firstCorner" : vector(0, 0) * inch,
            //         "secondCorner" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample)
            // });
            // skRectangle(excessSketch, "fullrectangle", {
            //         "firstCorner" : vector(0, 0) * inch,
            //         "secondCorner" : vector(baseWidth, baseLength)
            // });
            
            fCuboid(context, id + "baseCuboid", {
                    "corner1" : vector(0, 0, 0) * inch,
                    "corner2" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample, baseHeight)
            });
            
            fCuboid(context, id + "fullCuboid", {
                    "corner1" : vector(0, 0, 0) * inch,
                    "corner2" : vector(baseWidth, baseLength, baseHeight)
            });
            
            opBoolean(context, id + "boolean1", {
                    "tools" : qCreatedBy(id + "baseCuboid", EntityType.BODY),
                    "targets" : qCreatedBy(id + "fullCuboid", EntityType.BODY),
                    "operationType" : BooleanOperationType.SUBTRACTION
            });
            
            skSolve(excessSketch);
    });
