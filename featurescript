FeatureScript 2411;
import(path : "onshape/std/geometry.fs", version : "2411.0");
import(path : "onshape/std/common.fs", version : "2411.0");

const MY_SIZE_BOUNDS = { (inch) : [0.1, 10, 1000] } as LengthBoundSpec;
const MY_OCTAGON_BOUNDS = { (inch) : [0.1, 0.5, 5] } as LengthBoundSpec;
const MY_STRUT_BOUNDS = { (inch) : [0.05, 0.0625, 0.5] } as LengthBoundSpec;

export enum Excess
{
    annotation { "Name" : "Right" }
    RIGHT,
    annotation { "Name" : "Left" }
    LEFT
}

annotation { "Feature Type Name" : "Configurable Octagon Base" }

export const octBase = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "Base Length:" }
        isLength(definition.length, MY_SIZE_BOUNDS);

        annotation { "Name" : "Base Width:" }
        isLength(definition.width, MY_SIZE_BOUNDS);

        annotation { "Name" : "Base Height:" }
        isLength(definition.height, MY_OCTAGON_BOUNDS);

        annotation { "Name" : "Octagon Side Length:" }
        isLength(definition.sideLength, MY_OCTAGON_BOUNDS);

        annotation { "Name" : "Strut Width:" }
        isLength(definition.strutWidth, MY_STRUT_BOUNDS);

        annotation { "Name" : "Excess Material" }
        definition.excess is Excess;
    }
    {
        var baseLength = definition.length;
        var baseWidth = definition.width;
        var baseHeight = definition.height;
        var octagonLength = definition.sideLength;
        
        var sampleSketchStraight = newSketch(context, id + "sampleSketchStraight", {
                "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
            });
            
            skLineSegment(sampleSketchStraight, "line1", {
                        "start" : vector(octagonLength / 2, 0 * octagonLength),
                        "end" : vector(octagonLength / 2, (octagonLength / 2) - (0.001 * inch))
                    });
            skLineSegment(sampleSketchStraight, "line2", {
                        "start" : vector(0 * octagonLength, octagonLength / 2),
                        "end" : vector((octagonLength / 2) - (0.001 * inch), octagonLength / 2)
                    });
            skLineSegment(sampleSketchStraight, "line4", {
                        "start" : vector((octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchStraight, "line5", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), (octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch)),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), (octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch))
                    });
            skLineSegment(sampleSketchStraight, "line6", {
                        "start" : vector((octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchStraight, "line7", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), (octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), (octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch))
                    });
            skLineSegment(sampleSketchStraight, "line9", {
                        "start" : vector((octagonLength / 2) - (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line10", {
                        "start" : vector(octagonLength / 2, (octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch)),
                        "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line12", {
                        "start" : vector((octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line13", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line15", {
                        "start" : vector((octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch), octagonLength / 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketchStraight, "line16", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, (octagonLength / 2) - (0.001 * inch)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
                    });
            
            skSolve(sampleSketchStraight);
        
        var sampleSketchDiagonals = newSketch(context, id + "sampleSketchDiagonals", {
                "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
            });
            
            skLineSegment(sampleSketchDiagonals, "line3", {
                        "start" : vector(octagonLength / 2, octagonLength / 2),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchDiagonals, "line8", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchDiagonals, "line11", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchDiagonals, "line14", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            
            skSolve(sampleSketchDiagonals);
        
        var sampleSketchCenter = newSketch(context, id + "sampleSketchCenter", {
                "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
            });
            
            skLineSegment(sampleSketchCenter, "line17", {
                        "start" : vector((octagonLength / 2) + (octagonLength / sqrt(2)), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchCenter, "line18", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), (octagonLength / 2) + (octagonLength / sqrt(2))),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), (octagonLength * 1.5) + (octagonLength / sqrt(2)))
                    });
            skLineSegment(sampleSketchCenter, "line19", {
                        "start" : vector((octagonLength / 2) + (octagonLength / sqrt(2)), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchCenter, "line20", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), (octagonLength / 2) + (octagonLength / sqrt(2))),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), (octagonLength * 1.5) + (octagonLength / sqrt(2)))
                    });
            
            skSolve(sampleSketchCenter);
        
        var sampleSketchCorner = newSketch(context, id + "sampleSketchCorner", {
                "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
            });
            
            // corner 1
            skLineSegment(sampleSketchCorner, "line21", {
                        "start" : vector(octagonLength / 2, 0 * octagonLength),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketchCorner, "line22", {
                        "start" : vector(0 * octagonLength, octagonLength / 2),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });            
            skArc(sampleSketchCorner, "arc1", {
                    "start" : vector(5, 0) * millimeter,
                    "mid" : vector(cos(45 * degree) * 5, sin(45 * degree) * 5) * millimeter,
                    "end" : vector(0, 5) * millimeter
            });
            skLineSegment(sampleSketchCorner, "line23", {
                    "start" : vector(5, 0) * millimeter,
                    "end" : vector(octagonLength / 2, 0 * octagonLength)
            });
            skLineSegment(sampleSketchCorner, "line24", {
                    "start" : vector(0, 5) * millimeter,
                    "end" : vector(0 * octagonLength, octagonLength / 2)
            });
            
            // corner 2
            skLineSegment(sampleSketchCorner, "line25", {
                        "start" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchCorner, "line26", {
                        "start" : vector(octagonLength / 2, (octagonLength * 1.5) + (octagonLength / sqrt(2)) * 2),
                        "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skArc(sampleSketchCorner, "arc2", {
                    "start" : vector(0 * octagonLength, ((octagonLength * 2 + octagonLength / sqrt(2) * 2)) - (5 * millimeter)),
                    "mid" : vector(cos(45 * degree) * 5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2) - (sin(45 * degree) * 5 * millimeter)),
                    "end" : vector(5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2))
            });
            skLineSegment(sampleSketchCorner, "line27", {
                    "start" : vector(0 * octagonLength, ((octagonLength * 2 + octagonLength / sqrt(2) * 2)) - (5 * millimeter)),
                    "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
            });
            skLineSegment(sampleSketchCorner, "line28", {
                    "start" : vector(5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2)),
                    "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
            });
            
            // corner 3
            skLineSegment(sampleSketchCorner, "line29", {
                        "start" : vector((octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2), octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchCorner, "line30", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + ((octagonLength / sqrt(2)) * 2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skArc(sampleSketchCorner, "arc3", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), (octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter),
                    "mid" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - (cos(45 * degree) * 5 * millimeter), (octagonLength * 2 + octagonLength / sqrt(2) * 2) - (sin(45 * degree) * 5 * millimeter)),
                    "end" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2))
            });
            skLineSegment(sampleSketchCorner, "line31", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), (octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter),
                    "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
            });
            skLineSegment(sampleSketchCorner, "line32", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2)),
                    "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
            });
            
            // corner 4
            skLineSegment(sampleSketchCorner, "line33", {
                        "start" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketchCorner, "line34", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
                    });
            skArc(sampleSketchCorner, "arc4", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), 5 * millimeter),
                    "mid" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - (cos(45 * degree) * 5 * millimeter), sin(45 * degree) * 5 * millimeter),
                    "end" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, 0 * octagonLength)
            });
            skLineSegment(sampleSketchCorner, "line35", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), 5 * millimeter),
                    "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
            });
            skLineSegment(sampleSketchCorner, "line36", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, 0 * octagonLength),
                    "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
            });
            
            skSolve(sampleSketchCorner);
        
        var sample = (octagonLength * 2 + octagonLength / sqrt(2) * 2);
        var repeatLength = baseLength / sample;
        var repeatWidth = baseWidth / sample;
        
        var roundedRepeatLength = floor(repeatLength);
        var roundedRepeatWidth = floor(repeatWidth);
        
        var strut = definition.strutWidth;
        
        // base structure
        extrude(context, id + "extrudeSampleStraight", {
                "bodyType" : ExtendedToolBodyType.THIN,
                "depth" : baseHeight,
                "wallShape": qCreatedBy(id + "sampleSketchStraight", EntityType.EDGE),
                "thickness1" : strut / 2,
                "thickness2" : strut / 2
        });
        
        extrude(context, id + "extrudeSampleDiagonals", {
                "bodyType" : ExtendedToolBodyType.THIN,
                "depth" : baseHeight,
                "wallShape": qCreatedBy(id + "sampleSketchDiagonals", EntityType.EDGE),
                "thickness1" : strut / 2,
                "thickness2" : strut / 2
        });
        
        opBoolean(context, id + "booleanSample", {
                "tools" : qUnion([qCreatedBy(id + "extrudeSampleStraight", EntityType.BODY), qCreatedBy(id + "extrudeSampleDiagonals", EntityType.BODY)]),
                "operationType" : BooleanOperationType.UNION
        });
        
        // center structure
        extrude(context, id + "extrudeSampleCenter", {
                "entities" : qSketchRegion(id + "sampleSketchCenter"),
                "endBound" : BoundingType.BLIND,
                "depth" : baseHeight
        });
        
        fCylinder(context, id + "cylinderCenter", {
                "topCenter" : vector(octagonLength + (octagonLength / sqrt(2)), octagonLength + octagonLength / sqrt(2), baseHeight),
                "bottomCenter" : vector(octagonLength + (octagonLength / sqrt(2)), octagonLength + octagonLength / sqrt(2), 0 * octagonLength),
                "radius" : 5 * millimeter
        });
        
        opBoolean(context, id + "booleanCenter", {
                "tools" : qCreatedBy(id + "cylinderCenter", EntityType.BODY),
                "targets" : qCreatedBy(id + "extrudeSampleCenter", EntityType.BODY),
                "operationType" : BooleanOperationType.SUBTRACTION
        });
        
        // corner structure
        extrude(context, id + "extrudeCorner", {
                "entities" : qSketchRegion(id + "sampleSketchCorner"),
                "endBound" : BoundingType.BLIND,
                "depth" : baseHeight
        });
        
        // opBoolean(context, id + "booleanSampleFull", {
        //         "tools" : qUnion([qCreatedBy(id + "booleanSample", EntityType.BODY), qCreatedBy(id + "extrudeSampleStraight", EntityType.BODY), qCreatedBy(id + "extrudeSampleDiagonals", EntityType.BODY), qCreatedBy(id + "booleanCenter", EntityType.BODY), qCreatedBy(id + "extrudeSampleCenter", EntityType.BODY), qCreatedBy(id + "extrudeCorner", EntityType.BODY)]),
        //         "operationType" : BooleanOperationType.UNION
        // });
        
        // opBoolean(context, id + "boolean1", {
        //         "tools" : qUnion([qCreatedBy(id + "booleanSample", EntityType.BODY), qCreatedBy(id + "extrudeCorner", EntityType.BODY), qCreatedBy(id + "extrudeSampleStraight", EntityType.BODY), qCreatedBy(id + "extrudeSampleDiagonals", EntityType.BODY)]),
        //         "operationType" : BooleanOperationType.UNION
        // });
        
        // opBoolean(context, id + "boolean1", {
        //         "tools" : qUnion([qCreatedBy(id + "booleanSample", EntityType.BODY), qCreatedBy(id + "extrudeSampleCenter", EntityType.BODY), qCreatedBy(id + "extrudeSampleStraight", EntityType.BODY), qCreatedBy(id + "extrudeSampleDiagonals", EntityType.BODY)]),
        //         "operationType" : BooleanOperationType.UNION
        // });
        
        linearPattern(context, id + "linearPattern1", {
                "entities" : qUnion([qCreatedBy(id + "booleanSample", EntityType.BODY), qCreatedBy(id + "extrudeSampleStraight", EntityType.BODY), qCreatedBy(id + "extrudeSampleDiagonals", EntityType.BODY)]),
                "directionOne" : qCreatedBy(newId() + "Right", EntityType.FACE),
                "distance" : sample,
                "instanceCount" : roundedRepeatWidth,
                "hasSecondDir" : true,
                "directionTwo" : qCreatedBy(newId() + "Front", EntityType.FACE),
                "distanceTwo" : sample,
                "instanceCountTwo" : roundedRepeatLength,
                "oppositeDirectionTwo" : true,
                "defaultScope" : true
        });
        
        // creates the excess part, finished
        // var excessSketch = newSketchOnPlane(context, id + "excessSketch", {
        //         "sketchPlane" : XY_PLANE
        //     });
            
            // redundant
            // skRectangle(excessSketch, "baserectangle", {
            //         "firstCorner" : vector(0, 0) * inch,
            //         "secondCorner" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample)
            // });
            // skRectangle(excessSketch, "fullrectangle", {
            //         "firstCorner" : vector(0, 0) * inch,
            //         "secondCorner" : vector(baseWidth, baseLength)
            // });
            
            if (definition.excess is Excess.RIGHT) {
                var excessSketchR = newSketchOnPlane(context, id + "excessSketchR", {
                "sketchPlane" : XY_PLANE
                });
                
                fCuboid(context, id + "baseCuboidR", {
                            "corner1" : vector(0, 0, 0) * inch,
                            "corner2" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample, baseHeight)
                        });
                
                fCuboid(context, id + "fullCuboidR", {
                            "corner1" : vector(0, 0, 0) * inch,
                            "corner2" : vector(baseWidth, baseLength, baseHeight)
                        });
                
                opBoolean(context, id + "excessBooleanR", {
                            "tools" : qCreatedBy(id + "baseCuboidR", EntityType.BODY),
                            "targets" : qCreatedBy(id + "fullCuboidR", EntityType.BODY),
                            "operationType" : BooleanOperationType.SUBTRACTION
                        });
                skSolve(excessSketchR);
            } else if (definition.excess is Excess.LEFT) {
                var excessSketchL = newSketchOnPlane(context, id + "excessSketchL", {
                "sketchPlane" : XY_PLANE
                });
                
                fCuboid(context, id + "baseCuboidL", {
                            "corner1" : vector(0, 0, 0) * inch,
                            "corner2" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample, baseHeight)
                });
                
                fCuboid(context, id + "fullCuboidL", {
                        "corner1" : vector((roundedRepeatWidth * sample) - baseWidth, baseLength, baseHeight),
                        "corner2" : vector(roundedRepeatWidth * sample, 0 * octagonLength, 0 * octagonLength)
                });
                
                opBoolean(context, id + "excessBooleanL", {
                            "tools" : qCreatedBy(id + "baseCuboidL", EntityType.BODY),
                            "targets" : qCreatedBy(id + "fullCuboidL", EntityType.BODY),
                            "operationType" : BooleanOperationType.SUBTRACTION
                        });
                skSolve(excessSketchL);
            } else {
                print("LOL");
            }
            
            // skSolve(excessSketch);

        // TODO: add in circular center, delete sketches, boolean everything
    });
