FeatureScript 2411;
import(path : "onshape/std/geometry.fs", version : "2411.0");
import(path : "onshape/std/common.fs", version : "2411.0");

const MY_SIZE_BOUNDS = { (inch) : [0.1, 10, 1000] } as LengthBoundSpec;
const MY_OCTAGON_BOUNDS = { (inch) : [0.1, 0.5, 5] } as LengthBoundSpec;
const MY_STRUT_BOUNDS = { (inch) : [0.05, 0.0625, 0.5] } as LengthBoundSpec;

export enum Excess
{
    annotation { "Name" : "Left and Back" }
    LEFT_AND_BACK,
    annotation { "Name" : "Right and Back" }
    RIGHT_AND_BACK,
    annotation { "Name" : "Left and Front" }
    LEFT_AND_FRONT,
    annotation { "Name" : "Right and Back" }
    RIGHT_AND_FRONT
}

annotation { "Feature Type Name" : "Configurable Hex Base 2" }

export const hexBase = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "Base Length:" }
        isLength(definition.length, MY_SIZE_BOUNDS);

        annotation { "Name" : "Base Width:" }
        isLength(definition.width, MY_SIZE_BOUNDS);

        annotation { "Name" : "Base Height:" }
        isLength(definition.height, MY_OCTAGON_BOUNDS);

        annotation { "Name" : "Octagon Side Length:" }
        isLength(definition.sideLength, MY_OCTAGON_BOUNDS);

        annotation { "Name" : "Strut Width:" }
        isLength(definition.strutWidth, MY_STRUT_BOUNDS);

        annotation { "Name" : "Excess Material" }
        definition.excess is Excess;
    }
    {
        var baseLength = definition.length;
        var baseWidth = definition.width;
        var baseHeight = definition.height;
        var octagonLength = definition.sideLength;
        
        var sampleSketchStraight = newSketchOnPlane(context, id + "sampleSketchStraight", {
                "sketchPlane" : q
            });
            
            skLineSegment(sampleSketchStraight, "line1", {
                        "start" : vector(octagonLength / 2, 0 * octagonLength),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketchStraight, "line2", {
                        "start" : vector(0 * octagonLength, octagonLength / 2),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketchStraight, "line4", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchStraight, "line5", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchStraight, "line6", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchStraight, "line7", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchStraight, "line9", {
                        "start" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line10", {
                        "start" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line12", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line13", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchStraight, "line15", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            skLineSegment(sampleSketchStraight, "line16", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
                    });
            
            skSolve(sampleSketchStraight);
        
        var sampleSketchDiagonals = newSketchOnPlane(context, id + "sampleSketchDiagonals", {
                "sketchPlane" : plane(vector(0, 0, 0) * meter, vector(0, 0, 1), vector(1, 0, 0))
            });
            
            skLineSegment(sampleSketchDiagonals, "line3", {
                        "start" : vector(octagonLength / 2, octagonLength / 2),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sampleSketchDiagonals, "line8", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchDiagonals, "line11", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sampleSketchDiagonals, "line14", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            
            skSolve(sampleSketchDiagonals);
        
        var sample = (octagonLength * 2 + octagonLength / sqrt(2) * 2);
        var repeatLength = baseLength / sample;
        var repeatWidth = baseWidth / sample;
        
        var roundedRepeatLength = floor(repeatLength);
        var roundedRepeatWidth = floor(repeatWidth);
        
        var strut = definition.strutWidth;
        
        var baseSketchStraight = newSketch(context, id + "baseSketchStraight", {
                "sketchPlane" : plane(vector(0, 0, 0) * meter, vector(0, 0, 1), vector(1, 0, 0))
            });
            
            linearPattern(context, id + "linearPatternStraight", {
                    "patternType" : PatternType.FACE,
                    "entities" : qSketchRegion(id + "sampleSketchStraight"),
                    "faces" : qCreatedBy(id + "sampleSketchStraight", EntityType.BODY),
                    "directionOne" : qCreatedBy(newId() + "Right", EntityType.FACE),
                    "distance" : sample,
                    "instanceCount" : roundedRepeatWidth,
                    "hasSecondDir" : true,
                    "directionTwo" : qCreatedBy(newId() + "Front", EntityType.FACE),
                    "distanceTwo" : sample,
                    "instanceCountTwo" : roundedRepeatLength,
                    "oppositeDirectionTwo" : true,
                    "defaultScope" : true
                });
            
            skSolve(baseSketchStraight);
        
        var baseSketchDiagonals = newSketchOnPlane(context, id + "baseSketchDiagonals", {
                "sketchPlane" : plane(vector(0, 0, 0) * meter, vector(0, 0, 1), vector(1, 0, 0))
            });
            
            linearPattern(context, id + "linearPatternDiagonals", {
                    "patternType" : PatternType.FACE,
                    "entities" : qSketchRegion(id + "sampleSketchDiagonals"),
                    "faces" : qCreatedBy(id + "sampleSketchDiagonals", EntityType.BODY),
                    "directionOne" : qCreatedBy(newId() + "Right", EntityType.FACE),
                    "distance" : sample,
                    "instanceCount" : roundedRepeatWidth,
                    "hasSecondDir" : true,
                    "directionTwo" : qCreatedBy(newId() + "Front", EntityType.FACE),
                    "distanceTwo" : sample,
                    "instanceCountTwo" : roundedRepeatLength,
                    "oppositeDirectionTwo" : true,
                    "defaultScope" : true
                });
            
            skSolve(baseSketchDiagonals);
        
        // creates the excess part, finished
        var excessSketch = newSketchOnPlane(context, id + "excessSketch", {
                "sketchPlane" : plane(vector(0, 0, 0) * meter, vector(0, 0, 1), vector(1, 0, 0))
            });

        // redundant
        // skRectangle(excessSketch, "baserectangle", {
        //         "firstCorner" : vector(0, 0) * inch,
        //         "secondCorner" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample)
        // });
        // skRectangle(excessSketch, "fullrectangle", {
        //         "firstCorner" : vector(0, 0) * inch,
        //         "secondCorner" : vector(baseWidth, baseLength)
        // });

        fCuboid(context, id + "baseCuboid", {
                    "corner1" : vector(0, 0, 0) * inch,
                    "corner2" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample, baseHeight)
                });

        fCuboid(context, id + "fullCuboid", {
                    "corner1" : vector(0, 0, 0) * inch,
                    "corner2" : vector(baseWidth, baseLength, baseHeight)
                });

        opBoolean(context, id + "excessBoolean", {
                    "tools" : qCreatedBy(id + "baseCuboid", EntityType.BODY),
                    "targets" : qCreatedBy(id + "fullCuboid", EntityType.BODY),
                    "operationType" : BooleanOperationType.SUBTRACTION
                });

        skSolve(excessSketch);

        // need to boolean everything together
    });
